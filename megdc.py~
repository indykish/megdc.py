import argparse
import re
import pkg_resources

#*******************************************start validation*******/import re and argparse
ALPHANUMERIC_RE = re.compile(r'^[a-zA-Z][a-zA-Z0-9]*$')


def alphanumeric(s):
    """
    Enforces string to be alphanumeric with leading alpha.
    """
    if not ALPHANUMERIC_RE.match(s):
        raise argparse.ArgumentTypeError(
            'argument must start with a letter and contain only letters and numbers',
            )
    return s
#*******************************************end validation*******
__version__="2.0"
parser = argparse.ArgumentParser(description='Installing the megam package.')

parser.add_argument('integers', metavar='N',type=int,nargs='+', 
                   help='name of the Megam package')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                   const=sum, default=max,
                   help='sum the integers (default: find the max)')
parser.add_argument(
        '--version',
        action='version',
        version='%s' % __version__,
        help='the current installed version of ceph-deploy',
        )
parser.add_argument(
        '--username',
        help='the username to connect to the remote host',
        )
parser.add_argument(
        '--overwrite-conf',
        action='store_true',
        help='overwrite an existing conf file on remote host (if present)',
        )
parser.add_argument(
        '--cluster',
        metavar='NAME',
        help='name of the cluster',
        type=alphanumeric,
        )
parser.add_argument(
        '--ceph-conf',
        dest='ceph_conf',
        help='use (or reuse) a given ceph.conf file',
    )
# create the top-level parser
sub = parser.add_subparsers(
        title='commands',
        metavar='COMMAND',
        help='description',
        )

    entry_points = [
        (ep.name, ep.load())
        for ep in pkg_resources.iter_entry_points('megdc.cib')
        ]
    entry_points.sort(
        key=lambda (name, fn): getattr(fn, 'priority', 100),
        )
    for (name, fn) in entry_points:
        p = sub.add_parser(
            name,
            description=fn.__doc__,
            help=fn.__doc__,
            )


def install(args):
     
     print " hello "

  
# create the parser for the "foo" command
parser_foo = subparsers.add_parser('install',help='adsfkljl')
#parser_foo.add_argument('-x', type=int, default=1)
parser_foo.add_argument('megamcommon', type=str)
parser_foo.set_defaults(func=install)

args = parser.parse_args(sys.argv[1:])
args.func(args)

args = parser.parse_args()
print args.accumulate(args.integers)
"""


parser.print_help()



